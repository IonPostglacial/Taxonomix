@page "/"
@using Taxonomix.Data
@inject DatasetsService DatasetsService

@if (currentCharacter != null)
{
    <div class="flexbox">Taxon Description :
        @foreach (var (character, state) in selections)
        {
            <button type="button">@character.Name.Scientific : &nbsp; @state.Name.Scientific</button>
        }
    </div>
    <h2 class="sticky white-bg underlined">@currentCharacter.Name.Scientific ?</h2>
    <p>Potential results : @potentialTaxons.Count</p>
    <ul>
        @foreach (var taxon in potentialTaxons)
        {
            <li>@taxon.Name.Scientific</li>
        }
    </ul>
    <section class="states-grid">
    @foreach (var state in currentCharacter.States)
        {
            <button type="button" class="square" @onclick="() => OnStateSelected(state)">
                @foreach (var pic in state.Pictures)
                {
                    <img src="@pic.Source" />
                }
                @state.Name.Scientific
            </button>
        }
    </section>
}

@code {
    private Character currentCharacter;
    private HashSet<(Character, State)> selections = new();
    private Stack<Character> undescribedCharacters = new();
    private HashSet<Taxon> potentialTaxons = new();

    void OnStateSelected(State state)
    {
        if (selections.Count == 0)
        {
            potentialTaxons = InitializePotentialTaxons(state);
        }
        else
        {
            potentialTaxons = FilterTaxonsWithState(potentialTaxons, state);
        }
        selections.Add((currentCharacter, state));
        currentCharacter = undescribedCharacters.Pop();
    }

    IEnumerable<Taxon> GetAllTaxonsWithState(Hierarchy<Taxon> hierarchy, State state)
    {
        if (hierarchy.Entry.States.Contains(state))
        {
            yield return hierarchy.Entry;
        }
        foreach(var child in hierarchy.Children)
        {
            foreach(var result in GetAllTaxonsWithState(child, state))
            {
                yield return result;
            }
        }
    }

    HashSet<Taxon> InitializePotentialTaxons(State state)
    {
        var dataset = DatasetsService.SelectedDataset;
        if (dataset == null)
        {
            return new();
        }
        else
        {
            var taxonsWithState = new HashSet<Taxon>();
            foreach (var taxon in dataset.Taxons)
            {
                foreach(var taxonWithState in GetAllTaxonsWithState(taxon, state))
                {
                    taxonsWithState.Add(taxonWithState);
                }
            }
            return taxonsWithState;
        }
    }

    HashSet<Taxon> FilterTaxonsWithState(HashSet<Taxon> selectedTaxons, State state)
    {
        return selectedTaxons.Where(t => t.States.Contains(state)).ToHashSet();
    }

    protected override void OnInitialized()
    {
        var data = DatasetsService.SelectedDataset;
        if (data != null && data.Characters.Count > 0)
        {
            undescribedCharacters = new(data.Characters.SelectMany(c => c.IterTree()));
            currentCharacter = undescribedCharacters.Pop();
        }
    }
}